global:
  rbac:
    createAggregateClusterRoles: true
kubeProxy:
  enabled: false # kube-proxy less installation
kubeScheduler:
  enabled: false # scraping via pushprox as binded to localhost
kubeControllerManager:
  enabled: false # scraping via pushprox as binded to localhost
kubeEtcd:
  enabled: false # scraping via pushprox as binded to localhost
grafana:
  enabled: true
  envFromSecret: github-client
  deploymentStrategy:
    type: Recreate
  grafana.ini:
    server:
      domain: grafana.k8s-prod.acend.ch
      root_url: https://grafana.k8s-prod.acend.ch
    auth.github:
      enabled: true
      allow_sign_up: true
      client_id: aaaabbbbcccc
      client_secret: ddddeeeeffff
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      allowed_organizations: acend
      allow_assign_grafana_admin: true
      role_attribute_path: contains(groups[*], '@acend/team-cluster-admins') && 'GrafanaAdmin' || 'Viewer'
    auth:
      disable_login_form: true
  sidecar:
    dashboards:
      searchNamespace: ALL
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt-prod-dns01
    hosts:
      - grafana.k8s-prod.acend.ch
    path: /
    tls:
      - hosts:
        - grafana.k8s-prod.acend.ch
  serviceMonitor:
      enabled: true
  persistence:
    enabled: true
    size: 5Gi
prometheus:
  prometheusSpec:
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi

alertmanager:
  config:
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - receiver: 'null'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
    receivers:
    - name: 'null'
    - name: 'slack'
      slack_configs:
      - channel: "#ops"
        send_resolved: true
        api_url_file: /etc/alertmanager/secrets/slack-webhook-url/webhook-url
        icon_url: https://avatars3.githubusercontent.com/u/3380462
        title: |-
          [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
          {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
            {{" "}}(
            {{- with .CommonLabels.Remove .GroupLabels.Names }}
              {{- range $index, $label := .SortedPairs -}}
                {{ if $index }}, {{ end }}
                {{- $label.Name }}="{{ $label.Value -}}"
              {{- end }}
            {{- end -}}
            )
          {{- end }}
        text: >-
          {{ range .Alerts -}}
          *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
          *Description:* {{ .Annotations.description }}
          *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}
      
  alertmanagerSpec:
    secrets:
    - slack-webhook-url